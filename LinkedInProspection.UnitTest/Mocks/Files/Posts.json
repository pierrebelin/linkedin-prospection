[{"Text":"If any one wants to discover Verify for contract testing \uD83D\uDC47\uD83D\uDC47","PostedDate":"2024-12-20T20:27:45.471Z"},{"Text":"\uD83E\uDD14 Deux projets informatiques, deux approches radicalement diff\u00E9rentes...\n\nProjet A : \u0022On code direct, on verra apr\u00E8s\u0022\n\nSprint 1 : 5 features d\u00E9velopp\u00E9es\nSprint 3 : 4 features d\u00E9velopp\u00E9es\nSprint 6 : 2 features d\u00E9velopp\u00E9es\nR\u00E9sultat : La v\u00E9locit\u00E9 diminue, on livre de moins en moins car on est frein\u00E9 par l\u0027architecture actuelle\n\nProjet B : \u0022On prend le temps de comprendre\u0022\n\nSprint 1 : 3 features d\u00E9velopp\u00E9es\nSprint 3 : 3 features d\u00E9velopp\u00E9es\nSprint 6 : 3 features d\u00E9velopp\u00E9es\nR\u00E9sultat : On anticipe mieux les features car on comprend la vision globale du produit\n\nOn a l\u0027impression qu\u0027en prenant le temps de r\u00E9fl\u00E9chir en amont,\nce temps est perdu et qu\u0027il devrait \u00EAtre plut\u00F4t utilis\u00E9 pour coder.\n\nMais l\u0027objectif d\u0027un dev n\u0027est pas d\u0027\u00E9crire du code !\nAu contraire, un d\u00E9veloppeur qui est capable d\u0027enlever du code est bien plus efficace que celui qui en produit \u00E0 la pelle.\n\nLe temps \u0022perdu\u0022 \u00E0 comprendre est du temps gagn\u00E9 pour l\u0027avenir.\nPour le client, pour avoir une personne capable de le challenger sur le business (et non pas les d\u00E9tails d\u0027impl\u00E9mentations)\nPour vous, pour \u00E9viter de vous \u00E9puiser \u00E0 prendre 4j pour ajouter une feature\n\nOn peut faire le m\u00EAme parall\u00E8le avec les tests : \nAu d\u00E9but, on pense que le temps de tests est du temps de d\u00E9veloppement en moins.\nEt rapidement, on voit que le temps de tests est du temps de d\u00E9bug en moins (donc de d\u00E9veloppement en plus)\n\nLe d\u00E9veloppement n\u0027est que la partie visible de l\u0027iceberg.\nLa vraie valeur est dans la compr\u00E9hension du besoin. \uD83C\uDFAF","PostedDate":"2024-12-20T07:30:26.531Z"},{"Text":"Just read this fantastic deep dive into the Ambient Context pattern in .NET! \uD83D\uDE80\n\nhttps://lnkd.in/dVy2CNkv\n\nWhile we all love AsyncLocal and ThreadLocal, they\u0027re just building blocks. This article shows how to level up your context management game with the Ambient Context pattern \u2013 perfect for enterprise apps dealing with multi-tenancy, distributed tracing, and cross-cutting concerns.\n\nWhat caught my eye:\n- Solid implementation with stack corruption detection (saved me some headaches!)\n- Real-world examples of correlation IDs and tenant contexts\n- Smart handling of parallel processing scenarios\n- Clean ASP.NET Core integration patterns\n\nBig shoutout for the practical code examples and those \u0022when to use/avoid\u0022 guidelines. Been struggling with context management in our microservices, and this cleared up a lot of questions.\n\nIf you\u0027re building complex .NET apps, especially with async flows, you\u0027ll want to bookmark this one. \n\n#dotnet #softwarearchitecture #microservices #programming\n\nHave a goat day \uD83D\uDC10","PostedDate":"2024-12-19T13:00:26.817Z"},{"Text":"\uD83D\uDE13 Confession d\u0027un dev qui a pass\u00E9 des ann\u00E9es \u00E0 sur-complexifier ses projets...\n\nJ\u0027\u00E9tais ce dev qui mettait MediatR partout en .NET.\nPourquoi ? Parce que \u0022c\u0027est ce que font les bons devs\u0022 \uD83E\uDD26\u200D\u2642\uFE0F\n\nLa r\u00E9alit\u00E9 ?\nJe me mentais \u00E0 moi-m\u00EAme.\n\nJ\u0027ajoutais de la complexit\u00E9 pour me donner l\u0027impression d\u0027\u00EAtre un meilleur d\u00E9veloppeur.\nC\u0027est une tendance que je vois beaucoup sur LinkedIn : trouver une solution overengineering pour des probl\u00E8mes simples.\n\nJe viens de publier un article sur GoatReview qui raconte cette prise de conscience.\n\nLa vraie s\u00E9niorit\u00E9, ce n\u0027est pas d\u0027empiler les design patterns.\nC\u0027est de savoir quand une simple m\u00E9thode suffit.\n\nMediatR est un excellent outil... quand on en a VRAIMENT besoin et qu\u2019on comprend les limites.\n\nLe reste du temps ? KISS (Keep It Simple, Stupid) \uD83D\uDE09\n\n\u27A1\uFE0F D\u00E9couvre l\u0027article complet en commentaire","PostedDate":"2024-12-16T07:24:08.056Z"},{"Text":"\uD83D\uDE80 Tu penses que d\u00E9velopper vite fait de toi un bon d\u00E9veloppeur ?\nD\u00E9sol\u00E9 de te d\u00E9cevoir, mais tu fais fausse route...\n\nLe vrai challenge n\u0027est pas de coder vite, c\u0027est de coder juste.\n(J\u0027ai fait expr\u00E8s de ne pas dire \u0022bien\u0022)\n\nJ\u0027ai vu des projets partir en vrille parce qu\u0027on voulait \u0022avancer vite\u0022...\nDes centaines de lignes de code produites pour finalement tout refaire car on n\u0027avait pas compris le besoin.\n\nLa v\u00E9rit\u00E9 ? \nLe d\u00E9veloppement n\u0027est que la derni\u00E8re \u00E9tape.\n\nUn d\u00E9veloppeur qui passe 3 jours \u00E0 comprendre le m\u00E9tier sans coder est plus productif que celui qui code pendant 3 jours sans comprendre.\n\nLe code n\u0027est que le moyen d\u0027atteindre un objectif, pas l\u0027objectif lui-m\u00EAme.\n\nLa d\u00E9finition du besoin est tellement sous estim\u00E9 que les d\u00E9veloppeurs ne prennent m\u00EAme plus le temps de concevoir avant d\u0027impl\u00E9menter.\n\nCe n\u0027est pas une lacune de prendre le temps de r\u00E9fl\u00E9chir, et encore moins pour comprendre le besoin !\n\nN\u0027aie pas peur de r\u00E9pondre \u00E0 un client :\n\u0022Non, je n\u0027ai pas encore cod\u00E9, je suis encore en train de comprendre le besoin, et c\u0027est parfait comme \u00E7a !\u0022 \uD83D\uDCAA","PostedDate":"2024-12-12T08:16:35.932Z"},{"Text":"Yesterday was about fixing a bug and then apply the \u0022Boy Scout Rule\u0022: \u0022Leave your code better than you found it.\u0022\n\n- What do you\u00A0think about this rule?\n- What would be\u00A0different if every developers use this rule continuously?\n\n#sharingiscaring #craft","PostedDate":"2024-12-11T12:46:38.134Z"}]